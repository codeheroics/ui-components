{"version":3,"sources":["/Users/agauvrit/Dashlane/projects/ui-components/src/atoms/dropdownMenu/DropdownDemo.tsx","/Users/agauvrit/Dashlane/projects/ui-components/src/atoms/dropdownMenu/DropdownMenu.mdx","/Users/agauvrit/Dashlane/projects/ui-components/src/atoms/icons/index.ts","/Users/agauvrit/Dashlane/projects/ui-components/src/atoms/index.ts","/Users/agauvrit/Dashlane/projects/ui-components/src/index.ts"],"names":["DropdownDemo","React","dropdown1IsOpen","setDropdown1IsOpen","dropdown2IsOpen","setDropdown2IsOpen","containerRef","button1Ref","button2Ref","ref","style","height","display","background","justifyContent","position","nature","onClick","DropdownMenu","elements","title","icon","isOpen","dockingSide","placement","controllerRef","alignSelf","layoutProps","MDXLayout","MDXContent","components","props","mdxType","__position","__code","__scope","this","Playground","Props","Button","PhoneIcon","QuickActionsMenu","flexDirection","alignItems","useState","dropdownIsOpen","setDropdownIsOpen","buttonRef","useRef","isMDXComponent"],"mappings":"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","file":"static/js/src-atoms-dropdown-menu-dropdown-menu.2fdd49c0.js","sourcesContent":["import * as React from 'react';\nimport { Button, PhoneIcon } from 'index';\nimport DropdownMenu from './DropdownMenu';\n\nconst DropdownDemo: React.FC = () => {\n  const [dropdown1IsOpen, setDropdown1IsOpen] = React.useState(false);\n  const [dropdown2IsOpen, setDropdown2IsOpen] = React.useState(false);\n  const containerRef = React.useRef(null);\n  const button1Ref = React.useRef(null);\n  const button2Ref = React.useRef(null);\n\n  return (\n    <div\n      ref={containerRef}\n      style={{\n        height: '250px',\n        display: 'flex',\n        background: 'ghostwhite',\n        justifyContent: 'space-between'\n      }}\n    >\n      <div style={{ position: 'relative', height: 'fit-content' }}>\n        <div ref={button1Ref}>\n          <Button\n            nature='primary'\n            onClick={() => setDropdown1IsOpen(!dropdown1IsOpen)}\n          >\n            Click Me\n          </Button>\n        </div>\n        <DropdownMenu\n          elements={[\n            {\n              title: 'Hello',\n              icon: <PhoneIcon />,\n              onClick: () => {}\n            },\n            {\n              title: 'Holà',\n              onClick: () => {}\n            },\n            {\n              title: 'Bonjour',\n              onClick: () => {}\n            },\n            {\n              title: 'Gutten Tag',\n              onClick: () => {}\n            }\n          ]}\n          isOpen={dropdown1IsOpen}\n          dockingSide='left'\n          placement='top'\n          containerRef={containerRef}\n          controllerRef={button1Ref}\n        ></DropdownMenu>\n      </div>\n\n      <div\n        style={{\n          position: 'relative',\n          height: 'fit-content',\n          alignSelf: 'flex-end'\n        }}\n      >\n        <div ref={button2Ref}>\n          <Button\n            nature='secondary'\n            onClick={() => {\n              setDropdown2IsOpen(!dropdown2IsOpen);\n            }}\n          >\n            Click Me\n          </Button>\n        </div>\n        <DropdownMenu\n          elements={[\n            {\n              title: 'Hello',\n              icon: <PhoneIcon />,\n              onClick: () => {}\n            },\n            {\n              title: 'Holà',\n              onClick: () => {}\n            },\n            {\n              title: 'Bonjour',\n              onClick: () => {}\n            },\n            {\n              title: 'Gutten Tag',\n              onClick: () => {}\n            }\n          ]}\n          isOpen={dropdown2IsOpen}\n          dockingSide='left'\n          placement='bottom'\n          containerRef={containerRef}\n          controllerRef={button2Ref}\n        ></DropdownMenu>\n      </div>\n    </div>\n  );\n};\n\nexport default DropdownDemo;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport DropdownMenu from './DropdownMenu';\nimport DropdownDemo from './DropdownDemo';\nimport Button from '../button/Button';\nimport PhoneIcon from '../icons/PhoneIcon';\nimport QuickActionsMenu from '../../molecules/quick-actions-menu/QuickActionsMenu';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"dropdown-menu\"\n    }}>{`Dropdown Menu`}</h1>\n    <Playground __position={0} __code={'() => {\\n  const [dropdownIsOpen, setDropdownIsOpen] = React.useState(false)\\n  const buttonRef = React.useRef(null)\\n  return (\\n    <div style={{ position: \\'relative\\' }}>\\n      <div ref={buttonRef}>\\n        <Button\\n          nature=\\\"primary\\\"\\n          onClick={() => setDropdownIsOpen(!dropdownIsOpen)}\\n        >\\n          Click Me\\n        </Button>\\n      </div>\\n      <DropdownMenu\\n        elements={[\\n          {\\n            title: \\'Hello\\',\\n            icon: <PhoneIcon />,\\n            onClick: () => {},\\n          },\\n          {\\n            title: \\'Holà\\',\\n            onClick: () => {},\\n          },\\n          {\\n            title: \\'Bonjour\\',\\n            onClick: () => {},\\n          },\\n          {\\n            title: \\'Gutten Tag\\',\\n            onClick: () => {},\\n          },\\n        ]}\\n        isOpen={dropdownIsOpen}\\n        dockingSide=\\\"left\\\"\\n        placement=\\\"bottom\\\"\\n        buttonRef={buttonRef}\\n      ></DropdownMenu>\\n    </div>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      DropdownMenu,\n      DropdownDemo,\n      Button,\n      PhoneIcon,\n      QuickActionsMenu\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'flex-start',\n      justifyContent: 'space-around',\n      height: '200px'\n    }} mdxType=\"Playground\">\n  {() => {\n        const [dropdownIsOpen, setDropdownIsOpen] = React.useState(false);\n        const buttonRef = React.useRef(null);\n        return <div style={{\n          position: 'relative'\n        }}>\n          <div ref={buttonRef}>\n            <Button nature='primary' onClick={() => setDropdownIsOpen(!dropdownIsOpen)} mdxType=\"Button\">\nClick Me\n            </Button>\n          </div>\n          <DropdownMenu elements={[{\n            title: 'Hello',\n            icon: <PhoneIcon mdxType=\"PhoneIcon\" />,\n            onClick: () => {}\n          }, {\n            title: 'Holà',\n            onClick: () => {}\n          }, {\n            title: 'Bonjour',\n            onClick: () => {}\n          }, {\n            title: 'Gutten Tag',\n            onClick: () => {}\n          }]} isOpen={dropdownIsOpen} dockingSide='left' placement='bottom' buttonRef={buttonRef} mdxType=\"DropdownMenu\"></DropdownMenu>\n        </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"position-within-a-container\"\n    }}>{`Position within a container`}</h2>\n    <Playground __position={1} __code={'() => {\\n  const [dropdown1IsOpen, setDropdown1IsOpen] = React.useState(false)\\n  const [dropdown2IsOpen, setDropdown2IsOpen] = React.useState(false)\\n  const containerRef = React.useRef(null)\\n  const button1Ref = React.useRef(null)\\n  const button2Ref = React.useRef(null)\\n  return (\\n    <div\\n      ref={containerRef}\\n      style={{\\n        height: \\'250px\\',\\n        display: \\'flex\\',\\n        background: \\'ghostwhite\\',\\n        justifyContent: \\'space-between\\',\\n      }}\\n    >\\n      <div style={{ position: \\'relative\\', height: \\'fit-content\\' }}>\\n        <div ref={button1Ref}>\\n          <Button\\n            nature=\\\"primary\\\"\\n            onClick={() => setDropdown1IsOpen(!dropdown1IsOpen)}\\n          >\\n            Click Me\\n          </Button>\\n        </div>\\n        <DropdownMenu\\n          elements={[\\n            {\\n              title: \\'Hello\\',\\n              icon: <PhoneIcon />,\\n              onClick: () => {},\\n            },\\n            {\\n              title: \\'Holà\\',\\n              onClick: () => {},\\n            },\\n            {\\n              title: \\'Bonjour\\',\\n              onClick: () => {},\\n            },\\n            {\\n              title: \\'Gutten Tag\\',\\n              onClick: () => {},\\n            },\\n          ]}\\n          isOpen={dropdown1IsOpen}\\n          dockingSide=\\\"left\\\"\\n          placement=\\\"top\\\"\\n          containerRef={containerRef}\\n          buttonRef={button1Ref}\\n        ></DropdownMenu>\\n      </div>\\n      <div\\n        style={{\\n          position: \\'relative\\',\\n          height: \\'fit-content\\',\\n          alignSelf: \\'flex-end\\',\\n        }}\\n      >\\n        <div ref={button2Ref}>\\n          <Button\\n            nature=\\\"secondary\\\"\\n            onClick={() => {\\n              setDropdown2IsOpen(!dropdown2IsOpen)\\n            }}\\n          >\\n            Click Me\\n          </Button>\\n        </div>\\n        <DropdownMenu\\n          elements={[\\n            {\\n              title: \\'Hello\\',\\n              icon: <PhoneIcon />,\\n              onClick: () => {},\\n            },\\n            {\\n              title: \\'Holà\\',\\n              onClick: () => {},\\n            },\\n            {\\n              title: \\'Bonjour\\',\\n              onClick: () => {},\\n            },\\n            {\\n              title: \\'Gutten Tag\\',\\n              onClick: () => {},\\n            },\\n          ]}\\n          isOpen={dropdown2IsOpen}\\n          dockingSide=\\\"left\\\"\\n          placement=\\\"bottom\\\"\\n          containerRef={containerRef}\\n          buttonRef={button2Ref}\\n        ></DropdownMenu>\\n      </div>\\n    </div>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      DropdownMenu,\n      DropdownDemo,\n      Button,\n      PhoneIcon,\n      QuickActionsMenu\n    }} mdxType=\"Playground\">\n      {() => {\n        const [dropdown1IsOpen, setDropdown1IsOpen] = React.useState(false);\n        const [dropdown2IsOpen, setDropdown2IsOpen] = React.useState(false);\n        const containerRef = React.useRef(null);\n        const button1Ref = React.useRef(null);\n        const button2Ref = React.useRef(null);\n        return <div ref={containerRef} style={{\n          height: '250px',\n          display: 'flex',\n          background: 'ghostwhite',\n          justifyContent: 'space-between'\n        }}>\n          <div style={{\n            position: 'relative',\n            height: 'fit-content'\n          }}>\n            <div ref={button1Ref}>\n              <Button nature='primary' onClick={() => setDropdown1IsOpen(!dropdown1IsOpen)} mdxType=\"Button\">\nClick Me\n              </Button>\n            </div>\n            <DropdownMenu elements={[{\n              title: 'Hello',\n              icon: <PhoneIcon mdxType=\"PhoneIcon\" />,\n              onClick: () => {}\n            }, {\n              title: 'Holà',\n              onClick: () => {}\n            }, {\n              title: 'Bonjour',\n              onClick: () => {}\n            }, {\n              title: 'Gutten Tag',\n              onClick: () => {}\n            }]} isOpen={dropdown1IsOpen} dockingSide='left' placement='top' containerRef={containerRef} buttonRef={button1Ref} mdxType=\"DropdownMenu\"></DropdownMenu>\n          </div>\n  <div style={{\n            position: 'relative',\n            height: 'fit-content',\n            alignSelf: 'flex-end'\n          }}>\n    <div ref={button2Ref}>\n      <Button nature='secondary' onClick={() => {\n                setDropdown2IsOpen(!dropdown2IsOpen);\n              }} mdxType=\"Button\">\n        Click Me\n      </Button>\n    </div>\n    <DropdownMenu elements={[{\n              title: 'Hello',\n              icon: <PhoneIcon mdxType=\"PhoneIcon\" />,\n              onClick: () => {}\n            }, {\n              title: 'Holà',\n              onClick: () => {}\n            }, {\n              title: 'Bonjour',\n              onClick: () => {}\n            }, {\n              title: 'Gutten Tag',\n              onClick: () => {}\n            }]} isOpen={dropdown2IsOpen} dockingSide='left' placement='bottom' containerRef={containerRef} buttonRef={button2Ref} mdxType=\"DropdownMenu\"></DropdownMenu>\n  </div>\n        </div>;\n      }}\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","/*-- EXPORT ICON COMPONENTS --*/\nexport { default as OpenWebsiteIcon } from './OpenWebsiteIcon';\nexport { default as MoreIcon } from './MoreIcon';\nexport { default as ShieldFlagIcon } from './ShieldFlagIcon';\nexport { default as ShieldCheckIcon } from './ShieldCheckIcon';\nexport { default as PhoneIcon } from './PhoneIcon';\nexport { default as BuildingIcon } from './BuildingIcon';\nexport { default as HouseIcon } from './HouseIcon';\nexport { default as MailIcon } from './MailIcon';\nexport { default as PaymentsIcon } from './PaymentsIcon';\nexport { default as IdIcon } from './IdIcon';\nexport { default as MobileIcon } from './MobileIcon';\nexport { default as HelpIcon } from './HelpIcon';\nexport { default as PersonalInfoIcon } from './PersonalInfoIcon';\nexport { default as InfoCircleIcon } from './InfoCircleIcon';\nexport { default as PasswordsIcon } from './PasswordsIcon';\nexport { default as PasswordHistoryIcon } from './PasswordHistoryIcon';\nexport { default as SecurityDashboardIcon } from './SecurityDashboardIcon';\nexport { default as PasswordChangerIcon } from './PasswordChangerIcon';\nexport { default as LogOutIcon } from './LogOutIcon';\nexport { default as ComputerIcon } from './ComputerIcon';\nexport { default as ToolsIcon } from './ToolsIcon';\nexport { default as RefreshIcon } from './RefreshIcon';\nexport { default as WarningIcon } from './WarningIcon';\nexport { default as ArrowDownIcon } from './ArrowDownIcon';\nexport { default as CloseIcon } from './CloseIcon';\nexport { default as SearchIcon } from './SearchIcon';\nexport { default as DotsIcon } from './DotsIcon';\nexport { default as GeneratorIcon } from './GeneratorIcon';\nexport { default as WebIcon } from './WebIcon';\nexport { default as VaultIcon } from './VaultIcon';\nexport { default as CheckIcon } from './CheckIcon';\nexport { default as CaretDownIcon } from './CaretDownIcon';\nexport { default as LoaderIcon } from './LoaderIcon';\nexport { default as SharedIcon } from './SharedIcon';\nexport { default as NoNetworkIcon } from './NoNetworkIcon';\nexport { default as HideIcon } from './HideIcon';\nexport { default as RevealIcon } from './RevealIcon';\nexport { default as CopyPasswordIcon } from './CopyPasswordIcon';\nexport { default as EditIcon } from './EditIcon';\n","export { default as Button } from './button/Button';\nexport { default as Tooltip } from './tooltip/Tooltip';\nexport * from './icons';\nexport * from './button/types';\nexport * from './tooltip/types';\n","export * from './atoms';\n"],"sourceRoot":""}