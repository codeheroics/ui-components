{"version":3,"sources":["/Users/agauvrit/Dashlane/projects/ui-components/src/atoms/dropdownMenu/DropdownMenu.mdx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","of","DropdownMenu","parentName","__position","__code","__scope","this","Playground","Props","DropdownElement","Button","PhoneIcon","QuickActionsMenu","style","display","flexDirection","alignItems","justifyContent","height","React","useState","dropdownIsOpen","setDropdownIsOpen","controllerRef","useRef","position","ref","nature","onClick","isOpen","dockingSide","placement","icon","text","controller1Ref","controller2Ref","width","dropdown1IsOpen","setDropdown1IsOpen","dropdown2IsOpen","setDropdown2IsOpen","containerRef","button1Ref","button2Ref","background","alignSelf","elements","title","isMDXComponent"],"mappings":"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","file":"static/js/src-atoms-dropdown-menu-dropdown-menu.16597fab.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport DropdownMenu from './DropdownMenu';\nimport DropdownElement from '../../ions/dropdown/element/DropdownElement';\nimport Button from '../button/Button';\nimport PhoneIcon from '../icons/PhoneIcon';\nimport QuickActionsMenu from '../../molecules/quick-actions-menu/QuickActionsMenu';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"dropdown-menu\"\n    }}>{`Dropdown Menu`}</h1>\n    <p>{`The Dropdown Menu can be used to display a menu of options that can be hidden.`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={DropdownMenu} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <p>{`The dropdown can be defined alongside a controller. To display it correctly:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`both components must be wrapped in a container with an relative or absolute position`}</strong></li>\n      <li parentName=\"ul\">{`the controller's ref must be passed to the Dropdown`}</li>\n    </ul>\n    <Playground __position={1} __code={'() => {\\n  const [dropdownIsOpen, setDropdownIsOpen] = React.useState(false)\\n  const controllerRef = React.useRef(null)\\n  return (\\n    <div style={{ position: \\'relative\\' }}>\\n      <div ref={controllerRef}>\\n        <Button\\n          nature=\\\"primary\\\"\\n          onClick={() => setDropdownIsOpen(!dropdownIsOpen)}\\n        >\\n          Click Me\\n        </Button>\\n      </div>\\n      <DropdownMenu\\n        isOpen={dropdownIsOpen}\\n        dockingSide=\\\"left\\\"\\n        placement=\\\"bottom\\\"\\n        controllerRef={controllerRef}\\n      >\\n        <DropdownElement icon={<PhoneIcon />} text=\\\"Hello\\\" />\\n        <DropdownElement text=\\\"Holà\\\" />\\n        <DropdownElement text=\\\"Salut\\\" />\\n        <DropdownElement text=\\\"Hallo\\\" />\\n      </DropdownMenu>\\n    </div>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      DropdownMenu,\n      DropdownElement,\n      Button,\n      PhoneIcon,\n      QuickActionsMenu\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'flex-start',\n      justifyContent: 'space-around',\n      height: '200px'\n    }} mdxType=\"Playground\">\n  {() => {\n        const [dropdownIsOpen, setDropdownIsOpen] = React.useState(false);\n        const controllerRef = React.useRef(null);\n        return <div style={{\n          position: 'relative'\n        }}>\n          <div ref={controllerRef}>\n            <Button nature='primary' onClick={() => setDropdownIsOpen(!dropdownIsOpen)} mdxType=\"Button\">\nClick Me\n            </Button>\n          </div>\n          <DropdownMenu isOpen={dropdownIsOpen} dockingSide='left' placement='bottom' controllerRef={controllerRef} mdxType=\"DropdownMenu\">\n            <DropdownElement icon={<PhoneIcon mdxType=\"PhoneIcon\" />} text=\"Hello\" mdxType=\"DropdownElement\" />\n            <DropdownElement text=\"Holà\" mdxType=\"DropdownElement\" />\n            <DropdownElement text=\"Salut\" mdxType=\"DropdownElement\" />\n            <DropdownElement text=\"Hallo\" mdxType=\"DropdownElement\" />\n          </DropdownMenu>\n        </div>;\n      }}\n    </Playground>\n    <p>{`Dropdown can be defined as:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`placed below or above their controllerRef,`}</li>\n      <li parentName=\"ul\">{`aligned on their controller left or right`}</li>\n    </ul>\n    <Playground __position={2} __code={'() => {\\n  const controller1Ref = React.useRef(null)\\n  const controller2Ref = React.useRef(null)\\n  return (\\n    <div\\n      style={{\\n        display: \\'flex\\',\\n        justifyContent: \\'space-between\\',\\n        alignItems: \\'center\\',\\n        width: \\'100%\\',\\n        height: \\'100%\\',\\n      }}\\n    >\\n      <div style={{ position: \\'relative\\' }}>\\n        <div ref={controller1Ref}>\\n          <Button nature=\\\"primary\\\">TOP</Button>\\n        </div>\\n        <DropdownMenu\\n          isOpen={true}\\n          placement=\\\"top\\\"\\n          controllerRef={controller1Ref}\\n        >\\n          <DropdownElement text=\\\"Hello\\\" />\\n          <DropdownElement text=\\\"Holà\\\" />\\n        </DropdownMenu>\\n      </div>\\n      <div style={{ position: \\'relative\\' }}>\\n        <div ref={controller2Ref}>\\n          <Button nature=\\\"primary\\\">RIGHT</Button>\\n        </div>\\n        <DropdownMenu\\n          isOpen={true}\\n          dockingSide=\\\"right\\\"\\n          controllerRef={controller2Ref}\\n        >\\n          <DropdownElement text=\\\"Good Morning\\\" />\\n          <DropdownElement text=\\\"Konnichiha\\\" />\\n          <DropdownElement text=\\\"Guten Tag\\\" />\\n        </DropdownMenu>\\n      </div>\\n    </div>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      DropdownMenu,\n      DropdownElement,\n      Button,\n      PhoneIcon,\n      QuickActionsMenu\n    }} style={{\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'flex-start',\n      justifyContent: 'space-around',\n      height: '200px'\n    }} mdxType=\"Playground\">\n  {() => {\n        const controller1Ref = React.useRef(null);\n        const controller2Ref = React.useRef(null);\n        return <div style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          width: \"100%\",\n          height: \"100%\"\n        }}>\n    <div style={{\n            position: 'relative'\n          }}>\n      <div ref={controller1Ref}>\n        <Button nature='primary' mdxType=\"Button\">\n          TOP\n        </Button>\n      </div>\n      <DropdownMenu isOpen={true} placement='top' controllerRef={controller1Ref} mdxType=\"DropdownMenu\">\n        <DropdownElement text=\"Hello\" mdxType=\"DropdownElement\" />\n        <DropdownElement text=\"Holà\" mdxType=\"DropdownElement\" />\n      </DropdownMenu>\n    </div>\n          <div style={{\n            position: 'relative'\n          }}>\n  <div ref={controller2Ref}>\n    <Button nature='primary' mdxType=\"Button\">\n      RIGHT\n    </Button>\n  </div>\n  <DropdownMenu isOpen={true} dockingSide='right' controllerRef={controller2Ref} mdxType=\"DropdownMenu\">\n    <DropdownElement text=\"Good Morning\" mdxType=\"DropdownElement\" />\n    <DropdownElement text=\"Konnichiha\" mdxType=\"DropdownElement\" />\n    <DropdownElement text=\"Guten Tag\" mdxType=\"DropdownElement\" />\n  </DropdownMenu>\n          </div>\n  </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"position-within-a-container\"\n    }}>{`Position within a container`}</h2>\n    <p>{`Dropdown computes its ideal position within a container:\nif you pass `}<inlineCode parentName=\"p\">{`top`}</inlineCode>{` as the placement prop but there is not enough space within the container,\nthe menu position will be overwritten to `}<inlineCode parentName=\"p\">{`bottom`}</inlineCode>{`.`}</p>\n    <Playground __position={3} __code={'() => {\\n  const [dropdown1IsOpen, setDropdown1IsOpen] = React.useState(false)\\n  const [dropdown2IsOpen, setDropdown2IsOpen] = React.useState(false)\\n  const containerRef = React.useRef(null)\\n  const button1Ref = React.useRef(null)\\n  const button2Ref = React.useRef(null)\\n  return (\\n    <div\\n      ref={containerRef}\\n      style={{\\n        height: \\'250px\\',\\n        display: \\'flex\\',\\n        background: \\'ghostwhite\\',\\n        justifyContent: \\'space-between\\',\\n      }}\\n    >\\n      <div style={{ position: \\'relative\\', height: \\'fit-content\\' }}>\\n        <div ref={button1Ref}>\\n          <Button\\n            nature=\\\"primary\\\"\\n            onClick={() => setDropdown1IsOpen(!dropdown1IsOpen)}\\n          >\\n            Click Me\\n          </Button>\\n        </div>\\n        <DropdownMenu\\n          isOpen={dropdown1IsOpen}\\n          dockingSide=\\\"left\\\"\\n          placement=\\\"top\\\"\\n          containerRef={containerRef}\\n          controllerRef={button1Ref}\\n        >\\n          <DropdownElement text=\\\"Hello\\\" />\\n          <DropdownElement text=\\\"Holà\\\" />\\n          <DropdownElement text=\\\"Salut\\\" />\\n        </DropdownMenu>\\n      </div>\\n      <div\\n        style={{\\n          position: \\'relative\\',\\n          height: \\'fit-content\\',\\n          alignSelf: \\'flex-end\\',\\n        }}\\n      >\\n        <div ref={button2Ref}>\\n          <Button\\n            nature=\\\"secondary\\\"\\n            onClick={() => {\\n              setDropdown2IsOpen(!dropdown2IsOpen)\\n            }}\\n          >\\n            Click Me\\n          </Button>\\n        </div>\\n        <DropdownMenu\\n          elements={[\\n            {\\n              title: \\'Hello\\',\\n              icon: <PhoneIcon />,\\n              onClick: () => {},\\n            },\\n            {\\n              title: \\'Holà\\',\\n              onClick: () => {},\\n            },\\n            {\\n              title: \\'Bonjour\\',\\n              onClick: () => {},\\n            },\\n            {\\n              title: \\'Gutten Tag\\',\\n              onClick: () => {},\\n            },\\n          ]}\\n          isOpen={dropdown2IsOpen}\\n          dockingSide=\\\"left\\\"\\n          placement=\\\"bottom\\\"\\n          containerRef={containerRef}\\n          controllerRef={button2Ref}\\n        >\\n          <DropdownElement text=\\\"Hello\\\" />\\n          <DropdownElement text=\\\"Holà\\\" />\\n          <DropdownElement text=\\\"Salut\\\" />\\n        </DropdownMenu>\\n      </div>\\n    </div>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      DropdownMenu,\n      DropdownElement,\n      Button,\n      PhoneIcon,\n      QuickActionsMenu\n    }} mdxType=\"Playground\">\n      {() => {\n        const [dropdown1IsOpen, setDropdown1IsOpen] = React.useState(false);\n        const [dropdown2IsOpen, setDropdown2IsOpen] = React.useState(false);\n        const containerRef = React.useRef(null);\n        const button1Ref = React.useRef(null);\n        const button2Ref = React.useRef(null);\n        return <div ref={containerRef} style={{\n          height: '250px',\n          display: 'flex',\n          background: 'ghostwhite',\n          justifyContent: 'space-between'\n        }}>\n          <div style={{\n            position: 'relative',\n            height: 'fit-content'\n          }}>\n            <div ref={button1Ref}>\n              <Button nature='primary' onClick={() => setDropdown1IsOpen(!dropdown1IsOpen)} mdxType=\"Button\">\nClick Me\n              </Button>\n            </div>\n            <DropdownMenu isOpen={dropdown1IsOpen} dockingSide='left' placement='top' containerRef={containerRef} controllerRef={button1Ref} mdxType=\"DropdownMenu\">\n              <DropdownElement text=\"Hello\" mdxType=\"DropdownElement\" />\n              <DropdownElement text=\"Holà\" mdxType=\"DropdownElement\" />\n              <DropdownElement text=\"Salut\" mdxType=\"DropdownElement\" />\n            </DropdownMenu>\n          </div>\n  <div style={{\n            position: 'relative',\n            height: 'fit-content',\n            alignSelf: 'flex-end'\n          }}>\n    <div ref={button2Ref}>\n      <Button nature='secondary' onClick={() => {\n                setDropdown2IsOpen(!dropdown2IsOpen);\n              }} mdxType=\"Button\">\n        Click Me\n      </Button>\n    </div>\n    <DropdownMenu elements={[{\n              title: 'Hello',\n              icon: <PhoneIcon mdxType=\"PhoneIcon\" />,\n              onClick: () => {}\n            }, {\n              title: 'Holà',\n              onClick: () => {}\n            }, {\n              title: 'Bonjour',\n              onClick: () => {}\n            }, {\n              title: 'Gutten Tag',\n              onClick: () => {}\n            }]} isOpen={dropdown2IsOpen} dockingSide='left' placement='bottom' containerRef={containerRef} controllerRef={button2Ref} mdxType=\"DropdownMenu\">\n      <DropdownElement text=\"Hello\" mdxType=\"DropdownElement\" />\n      <DropdownElement text=\"Holà\" mdxType=\"DropdownElement\" />\n      <DropdownElement text=\"Salut\" mdxType=\"DropdownElement\" />\n    </DropdownMenu>\n  </div>\n        </div>;\n      }}\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}